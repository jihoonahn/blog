---
// Theme Toggle Component
---

<button
  id="theme-toggle"
  class="theme-toggle"
  aria-label="테마 전환"
  title="테마 전환"
>
  <svg
    class="sun-icon"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <path
      d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"
    ></path>
  </svg>
  <svg
    class="moon-icon"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style>
  .theme-toggle {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border-radius: 12px;
    border: 1px solid var(--border-primary);
    background: var(--bg-secondary);
    color: var(--text-primary);
    cursor: pointer;
    transition: all 0.3s ease;
    overflow: hidden;
    backdrop-filter: blur(10px);
  }

  .theme-toggle::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
        circle at 30% 30%,
        rgba(59, 130, 246, 0.1) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 70% 70%,
        rgba(139, 92, 246, 0.1) 0%,
        transparent 50%
      );
    border-radius: 12px;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  html[data-theme="dark"] .theme-toggle::after {
    background: radial-gradient(
        circle at 30% 30%,
        rgba(96, 165, 250, 0.2) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 70% 70%,
        rgba(167, 139, 250, 0.2) 0%,
        transparent 50%
      );
  }

  .theme-toggle:hover {
    background: var(--bg-tertiary);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-secondary);
  }

  .theme-toggle:hover::after {
    opacity: 1;
  }

  .theme-toggle:active {
    transform: translateY(0);
  }

  .sun-icon,
  .moon-icon {
    position: absolute;
    transition: all 0.3s ease;
  }

  .sun-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .moon-icon {
    opacity: 0;
    transform: rotate(180deg) scale(0.8);
  }

  [data-theme="dark"] .sun-icon {
    opacity: 0;
    transform: rotate(180deg) scale(0.8);
  }

  [data-theme="dark"] .moon-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  /* 애니메이션 효과 */
  .theme-toggle::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: var(--accent-primary);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
    z-index: -1;
  }

  .theme-toggle:active::before {
    width: 100%;
    height: 100%;
  }
</style>

<script>
  // 테마 관리 함수들
  function getStoredTheme() {
    if (typeof window === "undefined") return null;
    return localStorage.getItem("theme");
  }

  function getSystemTheme() {
    if (typeof window === "undefined") return "light";
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  function setTheme(theme) {
    if (typeof window === "undefined") return;

    console.log("Setting theme to:", theme); // 디버깅용

    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);

    // 테마 변경 이벤트 발생
    window.dispatchEvent(
      new CustomEvent("themeChanged", { detail: { theme } })
    );
  }

  function toggleTheme() {
    const currentTheme =
      document.documentElement.getAttribute("data-theme") || "light";
    const newTheme = currentTheme === "light" ? "dark" : "light";
    console.log("Toggling theme from", currentTheme, "to", newTheme); // 디버깅용
    setTheme(newTheme);
  }

  function initTheme() {
    if (typeof window === "undefined") return;

    // 초기 테마 설정
    const storedTheme = getStoredTheme();
    const systemTheme = getSystemTheme();
    const initialTheme = storedTheme || systemTheme;

    console.log("Initializing theme:", {
      storedTheme,
      systemTheme,
      initialTheme,
    }); // 디버깅용

    setTheme(initialTheme);

    // 토글 버튼 이벤트
    const toggleButton = document.getElementById("theme-toggle");
    if (toggleButton) {
      toggleButton.addEventListener("click", toggleTheme);
      console.log("Theme toggle button event listener added"); // 디버깅용
    } else {
      console.error("Theme toggle button not found!"); // 디버깅용
    }

    // 시스템 테마 변경 감지
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (e) => {
        if (!getStoredTheme()) {
          setTheme(e.matches ? "dark" : "light");
        }
      });
  }

  // DOM이 로드된 후 초기화
  if (typeof window !== "undefined") {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initTheme);
    } else {
      initTheme();
    }
  }
</script>
